name: Deploy to Production

on:
  pull_request:
    types: [closed]
    branches:
      - 'master'
      - 'main'

env:
  PROJECT_ID: ${{ secrets.PROD_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

jobs:
  deploy:
    name: Deploy to Production
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Parse config.yaml
        id: config
        run: |
          PROJECT_NAME=$(grep -A1 "id:" config.yaml | tail -n1 | sed 's/.*: //')
          REGION=$(grep -A1 "region:" config.yaml | tail -n1 | sed 's/.*: //')
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "project_id=${{ env.PROJECT_ID }}" >> $GITHUB_OUTPUT
      
      - name: Auth Docker
        run: gcloud auth configure-docker
      
      - name: Deploy Backend
        run: |
          cd backend
          
          # Build and push the backend image
          BACKEND_IMAGE="gcr.io/${{ steps.config.outputs.project_id }}/backend:prod"
          gcloud builds submit --tag $BACKEND_IMAGE
          
          # Deploy to Cloud Run with Firebase credentials mounted
          gcloud run deploy backend-api \
            --image $BACKEND_IMAGE \
            --platform managed \
            --region ${{ steps.config.outputs.region }} \
            --allow-unauthenticated \
            --project ${{ steps.config.outputs.project_id }} \
            --set-env-vars="ENVIRONMENT=prod" \
            --mount type=secret,source=firebase-credentials,target=/secrets/firebase-admin-key-prod.json
      
      - name: Get Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe backend-api \
            --platform managed \
            --region ${{ steps.config.outputs.region }} \
            --format "value(status.url)" \
            --project ${{ steps.config.outputs.project_id }})
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
      
      - name: Deploy Frontend
        run: |
          cd frontend
          
          # Build and push the frontend image
          FRONTEND_IMAGE="gcr.io/${{ steps.config.outputs.project_id }}/frontend:prod"
          gcloud builds submit --tag $FRONTEND_IMAGE --build-arg BACKEND_URL=${{ steps.backend-url.outputs.url }}
          
          # Deploy to Cloud Run
          gcloud run deploy frontend-web \
            --image $FRONTEND_IMAGE \
            --platform managed \
            --region ${{ steps.config.outputs.region }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,BACKEND_URL=${{ steps.backend-url.outputs.url }}" \
            --project ${{ steps.config.outputs.project_id }}
      
      - name: Output Deployment URLs
        id: deployment-urls
        run: |
          echo "Backend deployed to: ${{ steps.backend-url.outputs.url }}"
          FRONTEND_URL=$(gcloud run services describe frontend-web \
            --platform managed \
            --region ${{ steps.config.outputs.region }} \
            --format "value(status.url)" \
            --project ${{ steps.config.outputs.project_id }})
          echo "Frontend deployed to: $FRONTEND_URL"
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            Production deployment triggered by PR #${{ github.event.pull_request.number }}
            
            **Frontend**: ${{ steps.deployment-urls.outputs.frontend_url }}
            **Backend**: ${{ steps.backend-url.outputs.url }}
          draft: false
          prerelease: false 